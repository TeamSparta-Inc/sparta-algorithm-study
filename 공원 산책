#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

// park: 공원을 나타내는 문자열 배열
// park_len: park 배열의 길이
// routes: 이동 경로를 나타내는 문자열 배열
// routes_len: routes 배열의 길이
int* solution(const char* park[], size_t park_len, const char* routes[], size_t routes_len) {
    int park_height = park_len;
    int park_width = strlen(park[0]);

    int current_row = 0;
    int current_col = 0;
    for (int i = 0; i < park_height; i++) {
        for (int j = 0; j < park_width; j++) {
            if (park[i][j] == 'S') {
                current_row = i;
                current_col = j;
                break;
            }
        }
    }

    for (int i = 0; i < routes_len; i++) {
        char direction = routes[i][0];
        int distance = atoi(&routes[i][2]); // "E 2" 형식의 문자열에서 숫자 추출

        int dr = 0, dc = 0;
        if (direction == 'N') dr = -1;
        else if (direction == 'S') dr = 1;
        else if (direction == 'W') dc = -1;
        else if (direction == 'E') dc = 1;

        bool is_valid_move = true;
        for (int step = 1; step <= distance; step++) {
            int next_row = current_row + dr * step;
            int next_col = current_col + dc * step;

            if (next_row < 0 || next_row >= park_height || next_col < 0 || next_col >= park_width) {
                is_valid_move = false;
                break;
            }
            if (park[next_row][next_col] == 'X') {
                is_valid_move = false;
                break;
            }
        }

        if (is_valid_move) {
            current_row += dr * distance;
            current_col += dc * distance;
        }
    }

    int* answer = (int*)malloc(sizeof(int) * 2);
    answer[0] = current_row;
    answer[1] = current_col;
    return answer;
}
